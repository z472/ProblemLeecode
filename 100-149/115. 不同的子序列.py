'''
https://leetcode-cn.com/problems/distinct-subsequences/solution/dong-tai-gui-hua-by-powcai-5/
又是动态规划不会。你甚至都没有试图编一个存储结构来存信息的念头。因为设计一个存储结构也是要有逻辑的。还是逻辑不过关。
很多人评论都说自己想到了DP，但是找不出来一个规律。      试图揣摩，以便下次可以接近想出。1.该算法为何要dp是因为蛮力法
改进过来的，蛮力法是O(n^2)很好写，但必定超时；改变只是方便每次遍历，然后是分析遍历到每个位置需要什么。这是很粗略的揣摩。
这个逻辑不是凭空编造的，而是通过观察分析总结出来的，不要去编造。    DP和递归都是需要保存什么然后去通过一个递推式，就像
二叉树的用栈也可以递归一样。DP关键就是总结递推式。
    设个例子：s为babgbagbag,t为bag。蛮力法的改进就去找蛮力法需要重复做的不高效的位置，（设位序为1，n）比如s取1,2,7
ba都确定了t的前两位此时蛮力法要寻找t的下一位的所有值来往下递归去走。现在来到了s[7]。它需要它前面最接近的a的值，该位置有
几个ba，还有它前面的剩余a存储的几个ba，是这些数的和组成了该点g结尾的所有情况，还要加上它前面的g的值。 也就是说它既要加s的
和它同为g的保存的值，还要去加它前一位（在t中）为a的值，如果a保存好那么g就方便了。
    从上面揣摩的角度来看，为何t要为纵列就很清楚了，这样可以把两方面保存的值都加上。
    还是那句：这个逻辑不是凭空编造的，而是通过观察分析总结出来的，不要去试图编造。
'''