'''
这题如果确定是用dp来做的话。唯一混乱难懂的点就是冻结期的处理。
如何不漏解仍是dp的最大挑战。下面是官方的没改动的代码（包括它的注释）。他的f[i][1]明显做的是“卖”这个动作，可以
说是刚进入冷却期。它的描述有点误导。而它的f[i][2]也并不是它注释的字面意思。它表示的是i结点不作操作的状态。这里
它逻辑覆盖了冷却期的f[i-1][1]。注意：f[i][0]的转移中也夹带了i结点不操作的动作。    感觉它代码和分析还是有很
大出入的。
    从代码出发的理解和从题目分析有差别很可能是，代码角度，实操智慧的体现。很多人也许可以分析出这三个状态也能推出
某一两条状态转移（dp递推式）。但像我一样，不好写代码。

启示：代码不要死搬分析结论，逻辑准确无误的实现出来就可以。
'''
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0

        n = len(prices)
        # f[i][0]: 手上持有股票的最大收益
        # f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
        # f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
        f = [[-prices[0], 0, 0]] + [[0] * 3 for _ in range(n - 1)]
        for i in range(1, n):
            f[i][0] = max(f[i - 1][0], f[i - 1][2] - prices[i])
            f[i][1] = f[i - 1][0] + prices[i]
            f[i][2] = max(f[i - 1][1], f[i - 1][2])

        return max(f[n - 1][1], f[n - 1][2])

