'''
题意：从1-n中选值，每选一次就要付钱，求能猜出预设值（任意一个，成本最高）需要付的钱数的最小值。
比如说1-5， 如果先选3，那么还要判断4，5。要确保知道预设值还要再付一次4的钱。3+4=7.不如先看2再看4得6
来的好。
很快就明白了很难理解的题意，但是找不到令自己满意好编程的方法来写。
它要在选的次数和值的大小中权衡，在1-15之内我都找了一遍，发现寻找的最小值的方法都不一样。
有想过递归和记忆化dp。毕竟在n为（4，11）时是有最优值的规律，如果递归到了范围是4-11的话可以直接得出
寻找它范围的最小值。在范围n=2和3的时候也有选择的优先级。

官方题解，没细看，但最好的两种dp方法也是n^3的tc。它的方法倒数安全的很，不会漏解。
'''
class Solution:
    def getMoneyAmount(self, n: int) -> int:
        pass